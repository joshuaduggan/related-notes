### NEW Database structure

notes
- id
- name
- description

rel_types
- id
- structure (one-to-one), (one-to-many)
- name

rel_cores
- id
- rel_type

rel_legs
- id
- rel_core
- note
- role

users
- id
- user_email
- user_pass_hash
- available_time

Valid rel_type.structure values with valid rel_core.role values
- one-one
    - NULL
- one-many
    - root
    - NULL

#### Notes

Currently as of 0.2.0 a one-many type relation has many seperate relations to the many note. This is due to the legacy of the previous DB design. In future it may be changed to the seemingly more logical system of haveing a single relation with greater than 2 legs to relate to the "many" notes. I have not done it at this point because there may be advantages to always haveing precisely two legs to each relation and allowing the view of the DB complete say over how the relations are displayed, plus there may be additional complications when there are more than one "one-many" relations pointing to the same "one" note...


### OLD Database Structure

notes
  . id
  . is_category
  . name
  . description

relationships
  . id
  . relationship_id
  . note_id


Database Description

relationships
The midpoint (relationship_id) and one end point of a link. Join two relationships together by sharing a relationship_id to create a complete two way link. Related Notes expects all relationships to be made up of precisely two entries linking to two different notes.

relationships.relationship_id; int
Each pair of relationships are identified by a common but otherwise unique relationship_id. The Related Notes app generates these by using the id of the first relationships pair to be created.


Database SQL Commands

// Delete all relationships containing the specified note. Note that we need to
// create a temp table to delete while selecting from the same table
DELETE FROM relationships WHERE relationship_id IN (
  SELECT relationship_id FROM (
    SELECT * from relationships WHERE note_id = $noteId
  ) AS temp
)

// Get id's of notes that share relationships with this note.
SELECT note_id FROM relationships WHERE relationship_id IN (
  SELECT relationship_id FROM relationships WHERE note_id = $noteId
) AND note_id <> $noteId
